{"meta":{"title":"风连广宇的萌萌哒小博客","subtitle":"","description":"","author":"momentum","url":"https://zhengluoliudao.github.io","root":"/"},"pages":[],"posts":[{"title":"数据挖掘知识点汇总","slug":"数据挖掘知识点汇总","date":"2022-01-02T09:18:36.000Z","updated":"2022-01-02T09:35:49.115Z","comments":true,"path":"2022/01/02/数据挖掘知识点汇总/","link":"","permalink":"https://zhengluoliudao.github.io/2022/01/02/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/","excerpt":"","text":"预处理数据质量的度量：准确性，完整性，一致性，及时性，可信度，可解释性 1234567891011121314151617数据预处理的主要任务：数据清理： 对丢失数据，忽略元组或手工/自动填写 对噪声数据，binning（分类再进行数据平滑）, 回归拟合，检测噪声并去除，计算机人工联合检测 对不一致数据，函数依赖项，人工规则数据简化： 降维：PCA，奇异值分解 数字缩减：回归和对数线性模型，直方图/聚类/采样，数据立方体聚合 数据压缩：数据转换和数据离散化归一化：min-max归一化：(x-min)/(max-min)z-score归一化：x-均值/方差预处理的作用：缩减数据规模，整理数据形式；有效清理数据，增加数据分析都有效性和准确性预处理的步骤有哪些：数据抽样和过滤，数据标准化和归一化，数据清洗 12345678PCA：捕捉有最大变化量的投影。找协方差矩阵的特征向量步骤：1，归一化S（减去均值） 2，计算C=S^TS 3，计算特征值和特征向量，特征向量即是主成分 |A-λE|=0， 4，P=SU，U为特征向量的拼接 行列式计算：主对角线元素积与副对角线元素积的差计算特征值和特征向量：解|A-λE|=0得特征向量，再代入|A-λE|，求得基础解系，归一化即得到特征向量，拼接特征向量得到U投影矩阵 1SVD：A=UsigmaV 12皮尔逊相关系数：x和y的协方差除以x和y的标准差（注意都是除以n-1）Jaccard相似度：同为1/不同为0 序列数据挖掘12345GSP：先得到频繁一项集，再反复进行：生成候选，剪枝，计数，淘汰1）连接阶段：如果去掉序列模式S1的第一个项目与去掉序列模式S2的最后一个项目所得到的序列相同，则可以将S1与S2进行连接，即将S2的最后一个项目添加到S1中。2）剪切阶段：若某候选序列模式的某个子序列不是序列模式，则此候选序列不可能是序列模式，将它从候选序列模式中删除。 图挖掘12345Gspan:1、遍历所有的图，计算出所有的边和点的频度。2、将频度与最小支持度数做比较，移除不频繁的边和点。3、重新将剩下的点和边按照频度进行排序，将他们的排名号给边和点进行重新标号。4、再次计算每条边的频度，计算完后，然后初始化每条边，并且进行此边的subMining()挖掘过程。 分类1234决策树：如何确定分类属性：基尼指数，熵（最大化增益）（增益比），分类误差如何确定停止分类：所有记录属于同一类，所有记录属性值相同，没有剩余属性避免过拟合：预修剪pre-pruning（提前停止），post-pruning（可以用MDL） 1ROC：横坐标FPR，纵坐标TPR，随阈值变化 1234K近邻：k个最近的里投票 问题：距离公式，K的选择，属性值缩放归一化，维度贝叶斯分类器：最大化后验概率贝叶斯网络： 聚类12分区聚类和层次聚类聚类的类型：分离良好的，基于中心的，基于邻近的 1234567基于密度的聚类：DBSCAN算法：核心点，边界点，噪声点 在彼此Eps内的任何两个核心点都在同一个聚类中，核心点Eps内的点都在同一个聚类 部分聚类方法，时间复杂度O(n^2)，允许不准确则可以到O(n) 确定Eps和MinPts 基于网格的聚类：划分网格，计算网格密度，消除密度低于阈值的网格，连续网格形成簇 12345层次聚类：嵌套聚类凝聚：合并最接近的聚类，更新邻近矩阵，循环 聚类间距离：最小，最大，平均，质心，沃德法（平方差SSE变化量，每个值减去合并后的均值，平方再求和）分裂： cure算法（使用代表点） 1K-means：循环：选中心，根据距离分类 关联分析123456789频繁项集：Apriori算法： 剪枝：任意频繁项集的非空子集也是频繁的 FP-growth: 建立频繁一项集，剪枝删除没达到支持度的节点，按照支持度排序重排原集合（不要忘了这个） 建立FP-树 从树底E出发，建立条件模式基，祖先节点计数置为叶子节点的计数，从而挖掘出含E的频繁项集 递归挖掘频繁项集","categories":[],"tags":[{"name":"数据挖掘","slug":"数据挖掘","permalink":"https://zhengluoliudao.github.io/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"}]},{"title":"2020年高级数据库试题","slug":"hello","date":"2022-01-02T08:08:02.000Z","updated":"2022-01-02T08:18:08.393Z","comments":true,"path":"2022/01/02/hello/","link":"","permalink":"https://zhengluoliudao.github.io/2022/01/02/hello/","excerpt":"","text":"⼀、简答题（数据库语⾔，共20分） （8分）在图书管理数据库中，有如下三个关系：图书信息关系：B(B#, BNAME, AUTHOR, TYPE)，其中B#为图书编号，BNAME为书名，AUTHOR为作者，TYPE为图书类别；学⽣信息关系：S(S#, SNAME, CLASS)，其中S#为学号，SNAME为学⽣姓名，CLASS为班级号；借阅信息关系：L(S#, B#, DATE)，其中S#为借阅⼈学号，B#为被借阅图书编号，DATE为借阅⽇期。使⽤关系代数回答下列问题：a) （2分）查询借了《红楼梦》这本书的学⽣的姓名。b) （2分）查询105班的所有学⽣全都借过的图书的编号。c) （2分）查询“张三”同学借过，但是“李四“同学没有借过的书的编号。d) （2分）编写⼀个查询，说明如何根据该查询的结果验证B的关系实例是否满⾜函数依赖BNAME → B#。 1234567891011121314151617181920212223242526272829303132333435363738394041a)select SNAME from ((B join L using B#) join S using S#)where BNAME = &quot;红楼梦&quot; b) #这里有一个关键词，全都，即借阅人数等于总人数，或者不存在人没选select B# from ((B join L using B#) join S using S#) Xwhere CLASS = 105 group by B#having count(*) = (select count(*) from ((B join L using B#) join S using S#) Ywhere Y.CLASS = 105) select B# from((B join L using B#) join S using S#) Xwhere CLASS = 105 and not exists(select * from ((B join L using B#) join S using S#) Ywhere Y.CLASS = 105 and X.B# != Y.B#)c) #这里有一个关键词，借过/学过，没借过/没学过select B# from ((B join L using B#) join S using S#) Xwhere &quot;张三&quot; in (select SNAME from ((B join L using B#) join S using S#) Ywhere X.B# = Y.B#) Zand &quot;李四&quot; not in Zd) #验证函数依赖，即确定如果两本书书名相同，书号必相同，即根据书名找书号找不到两个select count(B#) from Bgroup by BNAME如果不是全为1，则函数依赖不成立，反之成立 （12分）在博客管理数据库中，有如下三个关系：⽤户信息关系：U(UID#，UNAME, UAGE, USEX)，该表包含属性UID#（⽤户ID）、UNAME（⽤户姓名）、UAGE（⽤户年龄）、USEX（⽤户性别）。博客信息关系：B(BID#，UID#，BTITLE，BCONTENT，BTIME)，该表包含属性BID#（博客编号）、UID#（作者ID），BTITLE（博客标题），BCONTENT（博客内容），BTIME（博客发布时间）。评论信息关系：C(CID#, BID#, UID#, CCONTENT，CTIME)，该表包含属性CID#（评论编号），BID#（被评论博客编号），UID#（评论者ID），CCONTENT（评论内容），CTIME（评论时间）。UID #、BID #、CID#分别为关系U、B、C的主键。使⽤SQL语⾔回答下列问题：a) （3分）删除名为“张三”的⽤户发表的所有博客。b) （3分）查询“张三”对“李四”发表的博客的评论总数。c) （3分）定义⼀个视图SumU(UID#, UNAME, Year, Count#)，其中UID#为⽤户id，UNAME为⽤户姓名，Year为年份，Count#为该⽤户该年度发表博客的总数。d)（3分）基于视图SumU，查询2019年发表博客数最多的⽤户的ID和姓名。 12345678910111213141516171819202122232425262728293031323334a)delete from Bwhere UID in (select UID from U where U.UID = B.UID and UNAME = &quot;张三&quot;)b)select count(*) from Cwhere BID in (select BID from B join U where UNAME = &quot;李四&quot;)and UID in (select BID from B join U where UNAME = &quot;张三&quot;)c)create view SumU asselect X.UID# UID#, X.UNAME UNAME, Date_FORMAT(X.BTIME, &quot;%Y&quot;) Year, count(BID#) Count# from U join B using UID# Xgroup by UID#, yeard) #关键词，最大, &gt;ALL , = MAXselect UID#, BNAMEfrom SumU Xwhere Year = 2019 and count# &gt;= all(select count# from SumU where Year = 2019) ⼆、计算与简答题（关系数据库理论，共18分）已知关系模式R(A, B, C, D, E)上的函数依赖集F为{ AC → E; B → CE; C → B; AB → CD; AE → D }，回答下列问题： （3分）求AC关于F的属性集闭包。 （3分）求R的候选键。 （4分）求F的最⼩覆盖。 （4分）将R分解为2个关系模式S(A, B, C)和T(A, B, D, E)，该分解是否是⽆损连接分解？说明理由。 （4分）将R进⾏分解⼀组3NF关系模式，使得该分解既是⽆损连接分解，⼜保持函数依赖。 121)闭包 三、论述题（共12分）结合你的数据库系统实践经历，回答下列问题： （4分）数据库的三级模式和两级映像架构对数据库系统有何重要意义？ （4分）在设计⼤型关系数据库时，遵照“概念设计→逻辑设计→物理设计”的设计过程有何好处？ （4分）数据库管理系统的缓冲区管理与操作系统的虚拟内存管理有何不同之处？ 121) 四、分析与简答题（数据库管理系统实现，共34分） （6分）使⽤可扩展hash表存储整型元素。设hash函数为h(x) = x mod 16，h(x)的结果是⼀个4位⼆进制序列，其前d位⽤于确定元素x属于哪个桶。设每个桶中⾄多包含2个元素。现将下列元素依次添加到hash表中：5, 19, 24, 26, 35, 48, 53, 61。初始时，hash表为空，且d = 1。请画出添加完上述所有元素后，最终得到的hash表。 1 （6分）关系R(a, b)和S(b, c)存储在磁盘上，分别占500和1000个磁盘块。R和S上既⽆索引，也未按属性b排序。设可⽤内存缓冲区块数为M，回答下列问题：a)（3分）如果M = 50，那么使⽤哪种连接算法执⾏R ⨝ S效率最⾼？I/O代价是多少？b)（3分）如果M = 126，那么使⽤哪种连接算法执⾏R ⨝ S效率最⾼？I/O代价是多少？ 12a)哈希，4500b)哈希 （6分）设教学管理数据库有如下3个关系模式：EMPLOYEE(ESSN#, ENAME, SALARY, DNO#)PROJECT(PNO#, PNAME)WORKS_ON(ESSN#, PNO#)DEPARTMENT(DNO#, DNAME)⽤户给出以下SQL语句：SELECT ENAMEFROM EMPLOYEE, WORKS_ON, PROJECTWHERE SALARY &lt; 3000 AND PROJECT.PNO = ‘P1’AND EMPLOYEE.ESSN# = WORKS_ON.ESSN# AND WORKS_ON.PNO# = PROJECT.PNO#;回答下列问题：a) （3分）写出该SQL语句对应的关系代数表达式，并画出该表达式对应的逻辑查询计划树。b) （3分）使⽤启发式查询优化⽅法对以上查询计划进⾏优化，并画出优化后的逻辑查询计划树。","categories":[],"tags":[{"name":"DataBase","slug":"DataBase","permalink":"https://zhengluoliudao.github.io/tags/DataBase/"}]}],"categories":[],"tags":[{"name":"数据挖掘","slug":"数据挖掘","permalink":"https://zhengluoliudao.github.io/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"},{"name":"DataBase","slug":"DataBase","permalink":"https://zhengluoliudao.github.io/tags/DataBase/"}]}